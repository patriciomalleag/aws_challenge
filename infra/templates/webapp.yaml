AWSTemplateFormatVersion: '2010-09-09'
Description: 'Aplicación Web en EC2 - Stack Simplificado para Frontend y Backend'

Parameters:
  LabRoleArn:
    Type: String
    Description: ARN del rol LabRole preasignado
    
  VPCId:
    Type: String
    Description: ID de la VPC donde desplegar la aplicación
    
  PublicSubnetId:
    Type: String
    Description: ID de la subred pública para la instancia EC2
    
  InstanceType:
    Type: String
    Description: Tipo de instancia EC2
    Default: t3.medium
    AllowedValues: [t3.micro, t3.small, t3.medium, t2.micro, t2.small]
    
  S3BucketRaw:
    Type: String
    Description: Nombre del bucket S3 para archivos raw
    
  S3BucketLogs:
    Type: String
    Description: Nombre del bucket S3 para logs de la aplicación
    
  DDBTableName:
    Type: String
    Description: Nombre de la tabla DynamoDB para el catálogo
    
  LambdaETLFunctionName:
    Type: String
    Description: Nombre de la función Lambda ETL
    
  KeyName:
    Type: String
    Description: Nombre del key pair para acceso SSH a la instancia
    Default: ""

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, ""]]

Resources:
  # Security Group para la instancia EC2
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instance running the web application
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access from internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access from internet
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access for debugging
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: data-pipeline-ec2-sg
        - Key: Project
          Value: data-pipeline

  # Instancia EC2
  WebAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09ac0b140f63d3458  # Ubuntu 22.04 LTS AMI (us-east-1)
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: LabInstanceProfile
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref AWS::NoValue]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # UserData simplificado - Solo clonar y ejecutar script de setup
          
          # Variables básicas
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          REGION="${AWS::Region}"
          LOG_FILE="/var/log/userdata.log"
          
          # Variables de entorno para la aplicación (desde CloudFormation)
          export AWS_REGION="${AWS::Region}"
          export S3_BUCKET_RAW="${S3BucketRaw}"
          export S3_BUCKET_LOGS="${S3BucketLogs}"
          export DDB_TABLE_NAME="${DDBTableName}"
          
          export LAMBDA_ETL_FUNCTION_NAME="${LambdaETLFunctionName}"
          
          # Función para loggear con timestamp
          log_message() {
            local message="$1"
            local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
            echo "[$timestamp] $message" | tee -a "$LOG_FILE"
          }
          
          # Inicio
          log_message "=== USERDATA START ==="
          log_message "Instance ID: $INSTANCE_ID"
          log_message "Region: $REGION"
          log_message "Variables de entorno configuradas:"
          log_message "  AWS_REGION: $AWS_REGION"
          log_message "  S3_BUCKET_RAW: $S3_BUCKET_RAW"
          log_message "  S3_BUCKET_LOGS: $S3_BUCKET_LOGS"
          log_message "  DDB_TABLE_NAME: $DDB_TABLE_NAME"
          log_message "  LAMBDA_ETL_FUNCTION_NAME: $LAMBDA_ETL_FUNCTION_NAME"
          
          # Actualizar sistema e instalar git
          log_message "Actualizando sistema e instalando git..."
          apt update -y >> "$LOG_FILE" 2>&1
          apt install -y git >> "$LOG_FILE" 2>&1
          
          # Crear directorio y clonar repositorio
          log_message "Clonando repositorio..."
          mkdir -p /opt/webapp
          cd /opt/webapp
          
          if git clone https://github.com/patriciomalleag/aws_challenge.git . >> "$LOG_FILE" 2>&1; then
            log_message "✅ Repositorio clonado exitosamente"
            
            # Ejecutar script de setup como root
            log_message "Ejecutando script de setup como root..."
            chmod +x infra/scripts/setup-ec2.sh
            
            # Verificar que el script existe
            if [ -f "infra/scripts/setup-ec2.sh" ]; then
              log_message "Script encontrado, ejecutando con bash como root..."
              if bash infra/scripts/setup-ec2.sh; then
                log_message "✅ Setup completado exitosamente"
              else
                SETUP_EXIT_CODE=$?
                log_message "❌ Error en el script de setup (código: $SETUP_EXIT_CODE)"
                log_message "Contenido del directorio actual:"
                ls -la >> "$LOG_FILE" 2>&1
                log_message "Contenido de infra/scripts/:"
                ls -la infra/scripts/ >> "$LOG_FILE" 2>&1 || echo "Directorio no existe" >> "$LOG_FILE"
                exit 1
              fi
            else
              log_message "❌ Script setup-ec2.sh no encontrado"
              log_message "Directorio actual: $(pwd)"
              log_message "Contenido del directorio actual:"
              ls -la >> "$LOG_FILE" 2>&1
              log_message "Contenido de infra/:"
              ls -la infra/ >> "$LOG_FILE" 2>&1 || echo "Directorio infra no existe" >> "$LOG_FILE"
              exit 1
            fi
          else
            log_message "❌ Error al clonar repositorio"
            exit 1
          fi
          
          log_message "=== USERDATA COMPLETADO ==="
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            Encrypted: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-WebApp
        - Key: Project
          Value: data-pipeline

  # Elastic IP para la instancia
  WebAppEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref WebAppInstance
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-WebApp-EIP
        - Key: Project
          Value: data-pipeline

Outputs:
  WebAppInstanceId:
    Description: ID de la instancia EC2
    Value: !Ref WebAppInstance
    Export:
      Name: !Sub ${AWS::StackName}-WebApp-Instance-ID

  WebAppPublicIP:
    Description: IP pública de la instancia EC2
    Value: !Ref WebAppEIP
    Export:
      Name: !Sub ${AWS::StackName}-WebApp-Public-IP

  WebAppURL:
    Description: URL de la aplicación web
    Value: !Sub http://${WebAppEIP}
    Export:
      Name: !Sub ${AWS::StackName}-WebApp-URL

  APIURL:
    Description: URL de la API
    Value: !Sub http://${WebAppEIP}/api
    Export:
      Name: !Sub ${AWS::StackName}-API-URL

  EC2SecurityGroupId:
    Description: ID del Security Group para EC2
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-EC2-SG-ID 